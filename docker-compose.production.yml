version: '3.8'

services:
  # Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: qdrant-production
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # API Gateway
  gateway:
    image: ghcr.io/${GITHUB_REPOSITORY}-gateway:latest
    container_name: gateway-production
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - STORAGE_SERVICE_URL=http://storage:8001
      - RETRIEVER_SERVICE_URL=http://retriever:8002
      - QUERY_ENHANCEMENT_SERVICE_URL=http://query_enhancement:8003
      - GENERATION_SERVICE_URL=http://generation:8004
      - LOG_LEVEL=WARNING
    depends_on:
      storage:
        condition: service_healthy
      retriever:
        condition: service_healthy
      query_enhancement:
        condition: service_healthy
      generation:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Storage Service
  storage:
    image: ghcr.io/${GITHUB_REPOSITORY}-storage:latest
    container_name: storage-production
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=WARNING
    depends_on:
      qdrant:
        condition: service_healthy
    volumes:
      - storage_uploads:/app/uploads
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.7'
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Retriever Service
  retriever:
    image: ghcr.io/${GITHUB_REPOSITORY}-retriever:latest
    container_name: retriever-production
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=production
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=WARNING
    depends_on:
      qdrant:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 3  # Scale retriever for high throughput
      resources:
        limits:
          memory: 1G
          cpus: '0.7'
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Query Enhancement Service
  query_enhancement:
    image: ghcr.io/${GITHUB_REPOSITORY}-query_enhancement:latest
    container_name: query-enhancement-production
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=WARNING
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Generation Service
  generation:
    image: ghcr.io/${GITHUB_REPOSITORY}-generation:latest
    container_name: generation-production
    ports:
      - "8004:8004"
    environment:
      - ENVIRONMENT=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=WARNING
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Application
  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY}-frontend:latest
    container_name: frontend-production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://gateway:8000
    depends_on:
      gateway:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Reverse Proxy (Nginx)
  nginx:
    image: nginx:alpine
    container_name: nginx-production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - gateway
      - frontend
    restart: always
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: redis-production
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-production
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-production
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

volumes:
  qdrant_data:
    driver: local
  storage_uploads:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16