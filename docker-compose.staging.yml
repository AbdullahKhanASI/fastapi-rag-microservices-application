version: '3.8'

services:
  # Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: qdrant-staging
    ports:
      - "6333:6333"
    volumes:
      - qdrant_staging_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Gateway
  gateway:
    image: ghcr.io/${GITHUB_REPOSITORY}-gateway:develop
    container_name: gateway-staging
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=staging
      - STORAGE_SERVICE_URL=http://storage:8001
      - RETRIEVER_SERVICE_URL=http://retriever:8002
      - QUERY_ENHANCEMENT_SERVICE_URL=http://query_enhancement:8003
      - GENERATION_SERVICE_URL=http://generation:8004
      - LOG_LEVEL=INFO
    depends_on:
      storage:
        condition: service_healthy
      retriever:
        condition: service_healthy
      query_enhancement:
        condition: service_healthy
      generation:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Storage Service
  storage:
    image: ghcr.io/${GITHUB_REPOSITORY}-storage:develop
    container_name: storage-staging
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=staging
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=INFO
    depends_on:
      qdrant:
        condition: service_healthy
    volumes:
      - storage_staging_uploads:/app/uploads
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Retriever Service
  retriever:
    image: ghcr.io/${GITHUB_REPOSITORY}-retriever:develop
    container_name: retriever-staging
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=staging
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=INFO
    depends_on:
      qdrant:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Query Enhancement Service
  query_enhancement:
    image: ghcr.io/${GITHUB_REPOSITORY}-query_enhancement:develop
    container_name: query-enhancement-staging
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=staging
      - LOG_LEVEL=INFO
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Generation Service
  generation:
    image: ghcr.io/${GITHUB_REPOSITORY}-generation:develop
    container_name: generation-staging
    ports:
      - "8004:8004"
    environment:
      - ENVIRONMENT=staging
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=INFO
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY}-frontend:develop
    container_name: frontend-staging
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://gateway:8000
    depends_on:
      gateway:
        condition: service_healthy
    restart: always

volumes:
  qdrant_staging_data:
    driver: local
  storage_staging_uploads:
    driver: local

networks:
  default:
    driver: bridge