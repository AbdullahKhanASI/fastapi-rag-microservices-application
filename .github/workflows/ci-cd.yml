name: RAG Chatbot CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "18"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =====================================================
  # CONTINUOUS INTEGRATION JOBS
  # =====================================================
  
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install UV (fast Python package manager)
      run: pip install uv
      
    - name: Create virtual environment
      run: uv venv
      
    - name: Install dependencies
      run: |
        source .venv/bin/activate
        uv pip install -r backend/requirements.txt
        uv pip install ruff black isort mypy pytest-cov
        
    - name: Code formatting (Black)
      run: |
        source .venv/bin/activate
        black --check backend/
        
    - name: Import sorting (isort)
      run: |
        source .venv/bin/activate
        isort --check-only backend/
        
    - name: Linting (Ruff)
      run: |
        source .venv/bin/activate
        ruff check backend/
        
    - name: Type checking (MyPy)
      run: |
        source .venv/bin/activate
        mypy backend/ --ignore-missing-imports
      continue-on-error: true  # Type checking issues shouldn't fail CI initially

  security-scan:
    name: Security Vulnerability Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install UV and dependencies
      run: |
        pip install uv
        uv venv
        source .venv/bin/activate
        uv pip install -r backend/requirements.txt
        uv pip install bandit safety
        
    - name: Security linting (Bandit)
      run: |
        source .venv/bin/activate
        bandit -r backend/ -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Dependency vulnerability scan (Safety)
      run: |
        source .venv/bin/activate
        safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  backend-tests:
    name: Backend Service Tests
    runs-on: ubuntu-latest
    
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install UV and dependencies
      run: |
        pip install uv
        uv venv
        source .venv/bin/activate
        uv pip install -r backend/requirements.txt
        uv pip install pytest pytest-asyncio pytest-cov
        
    - name: Wait for Qdrant to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:6333/health; do sleep 2; done'
        
    - name: Run Storage Service Tests
      env:
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        source .venv/bin/activate
        cd backend
        python -m pytest tests/test_file_processor.py -v --cov=services/storage --cov-report=xml
        
    - name: Run Embedding Service Tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        source .venv/bin/activate
        cd backend
        python -m pytest tests/test_embedding_service.py -v --cov-append --cov=services/storage --cov-report=xml
        
    - name: Run Vector Store Tests
      env:
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
      run: |
        source .venv/bin/activate
        cd backend
        python -m pytest tests/test_vector_store.py -v --cov-append --cov=services/storage --cov-report=xml
        
    - name: Run Retriever Integration Tests
      env:
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        source .venv/bin/activate
        cd backend
        python -m pytest tests/test_retriever_integration.py -v --cov-append --cov=services/retriever --cov-report=xml
        
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        name: backend-coverage
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: backend/pytest-results.xml

  frontend-tests:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint
        
    - name: Run type checking
      run: |
        cd frontend
        npm run type-check
      continue-on-error: true
      
    - name: Run tests
      run: |
        cd frontend
        npm run test
      continue-on-error: true
      
    - name: Build application
      run: |
        cd frontend
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/.next

  # =====================================================
  # DOCKER BUILD & REGISTRY JOBS
  # =====================================================
  
  docker-build:
    name: Docker Build & Push
    needs: [code-quality, backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        service: 
          - storage
          - retriever
          - query_enhancement
          - generation
          - gateway
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/services/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  frontend-docker:
    name: Frontend Docker Build & Push
    needs: [code-quality, frontend-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =====================================================
  # DEPLOYMENT JOBS
  # =====================================================
  
  deploy-staging:
    name: Deploy to Staging
    needs: [docker-build, frontend-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.ragchatbot.example.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could be:
        # - kubectl apply -f k8s/staging/
        # - docker-compose up -d with staging config
        # - Terraform apply for staging infrastructure
        
    - name: Run health checks
      run: |
        echo "Running health checks on staging..."
        # Add health check commands
        # curl -f https://staging.ragchatbot.example.com/health/all

  deploy-production:
    name: Deploy to Production
    needs: [docker-build, frontend-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://ragchatbot.example.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on production..."
        # Add production smoke tests

  # =====================================================
  # NOTIFICATION & REPORTING JOBS
  # =====================================================
  
  notify:
    name: Deployment Notifications
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "✅ Production deployment successful!"
        # Add Slack/Discord/Email notification here
        
    - name: Notify failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Production deployment failed!"
        # Add failure notification here

  performance-tests:
    name: Performance & Load Tests
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # Add performance testing tools like:
        # - Artillery.js for load testing
        # - Lighthouse for frontend performance
        # - Custom scripts for API performance
        
    - name: Generate performance report
      run: |
        echo "Generating performance report..."
        # Generate and upload performance metrics