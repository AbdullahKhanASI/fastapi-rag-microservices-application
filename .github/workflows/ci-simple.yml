name: Simple CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "18"

jobs:
  basic-tests:
    name: Basic CI Tests
    runs-on: ubuntu-latest
    
    services:
      qdrant:
        image: qdrant/qdrant:v1.7.0
        ports:
          - 6333:6333
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
        
    - name: Install UV and Python dependencies
      run: |
        pip install uv
        uv venv
        source .venv/bin/activate
        uv pip install -r backend/requirements-consolidated.txt
        
    - name: Wait for Qdrant to be ready
      run: |
        echo "Waiting for Qdrant to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:6333/health; then
            echo "Qdrant is ready!"
            break
          fi
          echo "Attempt $i/30: Waiting for Qdrant..."
          sleep 5
        done
        
    - name: Test Qdrant connection
      run: |
        source .venv/bin/activate
        cd backend
        python -c "
from qdrant_client import QdrantClient
try:
    client = QdrantClient('localhost', port=6333)
    info = client.get_collections()
    print('✅ Successfully connected to Qdrant')
    print(f'Collections: {info}')
except Exception as e:
    print(f'❌ Failed to connect to Qdrant: {e}')
    exit(1)
"
        
    - name: Run basic tests
      env:
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
      run: |
        source .venv/bin/activate
        cd backend
        echo "Running import and functionality tests..."
        python test_imports.py

  frontend-basic:
    name: Frontend Basic Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Check TypeScript
      run: |
        cd frontend
        npm run type-check
      continue-on-error: true
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Test basic functionality
      run: |
        cd frontend
        echo "✅ Frontend build completed successfully!"

  code-style:
    name: Code Style Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install formatting tools
      run: |
        pip install uv
        uv venv
        source .venv/bin/activate
        uv pip install black ruff isort
        
    - name: Check code formatting
      run: |
        source .venv/bin/activate
        echo "Checking Python code style..."
        black --check backend/ || echo "⚠️ Code formatting issues found (run 'black backend/' to fix)"
        ruff check backend/ || echo "⚠️ Linting issues found"
        isort --check-only backend/ || echo "⚠️ Import sorting issues found"
        echo "✅ Code style check completed"
      continue-on-error: true

  docker-test-build:
    name: Test Docker Builds
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        service: [storage, retriever, gateway]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Test build Docker image
      run: |
        echo "Testing Docker build for ${{ matrix.service }} service..."
        docker build -t test-${{ matrix.service }} ./backend/services/${{ matrix.service }}
        echo "✅ Docker build test passed for ${{ matrix.service }}"

  summary:
    name: CI Summary
    needs: [basic-tests, frontend-basic, code-style]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check results
      run: |
        echo "## CI Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Basic Tests: ${{ needs.basic-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: ${{ needs.frontend-basic.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Code Style: ${{ needs.code-style.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.basic-tests.result }}" == "success" && "${{ needs.frontend-basic.result }}" == "success" ]]; then
          echo "✅ All core tests passed!" >> $GITHUB_STEP_SUMMARY
          echo "✅ CI pipeline successful!"
        else
          echo "⚠️ Some tests failed - check the logs above" >> $GITHUB_STEP_SUMMARY
        fi